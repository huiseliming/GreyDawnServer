/**
 *
 *  Product.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Product.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::products_db2;

const std::string Product::Cols::_id = "id";
const std::string Product::Cols::_productName = "productName";
const std::string Product::Cols::_dir_id = "dir_id";
const std::string Product::Cols::_salePrice = "salePrice";
const std::string Product::Cols::_supplier = "supplier";
const std::string Product::Cols::_brand = "brand";
const std::string Product::Cols::_cutoff = "cutoff";
const std::string Product::Cols::_costPrice = "costPrice";
const std::string Product::primaryKeyName = "id";
const bool Product::hasPrimaryKey = true;
const std::string Product::tableName = "product";

const std::vector<typename Product::MetaData> Product::metaData_={
{"id","int64_t","bigint(20)",8,1,1,1},
{"productName","std::string","varchar(45)",45,0,0,0},
{"dir_id","int64_t","bigint(11)",8,0,0,0},
{"salePrice","double","double",8,0,0,0},
{"supplier","std::string","varchar(45)",45,0,0,0},
{"brand","std::string","varchar(45)",45,0,0,0},
{"cutoff","double","double",8,0,0,0},
{"costPrice","double","double",8,0,0,0}
};
const std::string &Product::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Product::Product(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<int64_t>(r["id"].as<int64_t>());
        }
        if(!r["productName"].isNull())
        {
            productname_=std::make_shared<std::string>(r["productName"].as<std::string>());
        }
        if(!r["dir_id"].isNull())
        {
            dirId_=std::make_shared<int64_t>(r["dir_id"].as<int64_t>());
        }
        if(!r["salePrice"].isNull())
        {
            saleprice_=std::make_shared<double>(r["salePrice"].as<double>());
        }
        if(!r["supplier"].isNull())
        {
            supplier_=std::make_shared<std::string>(r["supplier"].as<std::string>());
        }
        if(!r["brand"].isNull())
        {
            brand_=std::make_shared<std::string>(r["brand"].as<std::string>());
        }
        if(!r["cutoff"].isNull())
        {
            cutoff_=std::make_shared<double>(r["cutoff"].as<double>());
        }
        if(!r["costPrice"].isNull())
        {
            costprice_=std::make_shared<double>(r["costPrice"].as<double>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 8 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            productname_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            dirId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            saleprice_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            supplier_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            brand_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            cutoff_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            costprice_=std::make_shared<double>(r[index].as<double>());
        }
    }

}

Product::Product(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 8)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            productname_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            dirId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            saleprice_=std::make_shared<double>(pJson[pMasqueradingVector[3]].asDouble());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            supplier_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            brand_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            cutoff_=std::make_shared<double>(pJson[pMasqueradingVector[6]].asDouble());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            costprice_=std::make_shared<double>(pJson[pMasqueradingVector[7]].asDouble());
        }
    }
}

Product::Product(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("productName"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["productName"].isNull())
        {
            productname_=std::make_shared<std::string>(pJson["productName"].asString());
        }
    }
    if(pJson.isMember("dir_id"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["dir_id"].isNull())
        {
            dirId_=std::make_shared<int64_t>((int64_t)pJson["dir_id"].asInt64());
        }
    }
    if(pJson.isMember("salePrice"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["salePrice"].isNull())
        {
            saleprice_=std::make_shared<double>(pJson["salePrice"].asDouble());
        }
    }
    if(pJson.isMember("supplier"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["supplier"].isNull())
        {
            supplier_=std::make_shared<std::string>(pJson["supplier"].asString());
        }
    }
    if(pJson.isMember("brand"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["brand"].isNull())
        {
            brand_=std::make_shared<std::string>(pJson["brand"].asString());
        }
    }
    if(pJson.isMember("cutoff"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["cutoff"].isNull())
        {
            cutoff_=std::make_shared<double>(pJson["cutoff"].asDouble());
        }
    }
    if(pJson.isMember("costPrice"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["costPrice"].isNull())
        {
            costprice_=std::make_shared<double>(pJson["costPrice"].asDouble());
        }
    }
}

void Product::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 8)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            productname_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            dirId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            saleprice_=std::make_shared<double>(pJson[pMasqueradingVector[3]].asDouble());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            supplier_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            brand_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            cutoff_=std::make_shared<double>(pJson[pMasqueradingVector[6]].asDouble());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            costprice_=std::make_shared<double>(pJson[pMasqueradingVector[7]].asDouble());
        }
    }
}
                                                                    
void Product::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("productName"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["productName"].isNull())
        {
            productname_=std::make_shared<std::string>(pJson["productName"].asString());
        }
    }
    if(pJson.isMember("dir_id"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["dir_id"].isNull())
        {
            dirId_=std::make_shared<int64_t>((int64_t)pJson["dir_id"].asInt64());
        }
    }
    if(pJson.isMember("salePrice"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["salePrice"].isNull())
        {
            saleprice_=std::make_shared<double>(pJson["salePrice"].asDouble());
        }
    }
    if(pJson.isMember("supplier"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["supplier"].isNull())
        {
            supplier_=std::make_shared<std::string>(pJson["supplier"].asString());
        }
    }
    if(pJson.isMember("brand"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["brand"].isNull())
        {
            brand_=std::make_shared<std::string>(pJson["brand"].asString());
        }
    }
    if(pJson.isMember("cutoff"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["cutoff"].isNull())
        {
            cutoff_=std::make_shared<double>(pJson["cutoff"].asDouble());
        }
    }
    if(pJson.isMember("costPrice"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["costPrice"].isNull())
        {
            costprice_=std::make_shared<double>(pJson["costPrice"].asDouble());
        }
    }
}

const int64_t &Product::getValueOfId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &Product::getId() const noexcept
{
    return id_;
}
const typename Product::PrimaryKeyType & Product::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &Product::getValueOfProductname() const noexcept
{
    const static std::string defaultValue = std::string();
    if(productname_)
        return *productname_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Product::getProductname() const noexcept
{
    return productname_;
}
void Product::setProductname(const std::string &pProductname) noexcept
{
    productname_ = std::make_shared<std::string>(pProductname);
    dirtyFlag_[1] = true;
}
void Product::setProductname(std::string &&pProductname) noexcept
{
    productname_ = std::make_shared<std::string>(std::move(pProductname));
    dirtyFlag_[1] = true;
}


void Product::setProductnameToNull() noexcept
{
    productname_.reset();
    dirtyFlag_[1] = true;
}

const int64_t &Product::getValueOfDirId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(dirId_)
        return *dirId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &Product::getDirId() const noexcept
{
    return dirId_;
}
void Product::setDirId(const int64_t &pDirId) noexcept
{
    dirId_ = std::make_shared<int64_t>(pDirId);
    dirtyFlag_[2] = true;
}


void Product::setDirIdToNull() noexcept
{
    dirId_.reset();
    dirtyFlag_[2] = true;
}

const double &Product::getValueOfSaleprice() const noexcept
{
    const static double defaultValue = double();
    if(saleprice_)
        return *saleprice_;
    return defaultValue;
}
const std::shared_ptr<double> &Product::getSaleprice() const noexcept
{
    return saleprice_;
}
void Product::setSaleprice(const double &pSaleprice) noexcept
{
    saleprice_ = std::make_shared<double>(pSaleprice);
    dirtyFlag_[3] = true;
}


void Product::setSalepriceToNull() noexcept
{
    saleprice_.reset();
    dirtyFlag_[3] = true;
}

const std::string &Product::getValueOfSupplier() const noexcept
{
    const static std::string defaultValue = std::string();
    if(supplier_)
        return *supplier_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Product::getSupplier() const noexcept
{
    return supplier_;
}
void Product::setSupplier(const std::string &pSupplier) noexcept
{
    supplier_ = std::make_shared<std::string>(pSupplier);
    dirtyFlag_[4] = true;
}
void Product::setSupplier(std::string &&pSupplier) noexcept
{
    supplier_ = std::make_shared<std::string>(std::move(pSupplier));
    dirtyFlag_[4] = true;
}


void Product::setSupplierToNull() noexcept
{
    supplier_.reset();
    dirtyFlag_[4] = true;
}

const std::string &Product::getValueOfBrand() const noexcept
{
    const static std::string defaultValue = std::string();
    if(brand_)
        return *brand_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Product::getBrand() const noexcept
{
    return brand_;
}
void Product::setBrand(const std::string &pBrand) noexcept
{
    brand_ = std::make_shared<std::string>(pBrand);
    dirtyFlag_[5] = true;
}
void Product::setBrand(std::string &&pBrand) noexcept
{
    brand_ = std::make_shared<std::string>(std::move(pBrand));
    dirtyFlag_[5] = true;
}


void Product::setBrandToNull() noexcept
{
    brand_.reset();
    dirtyFlag_[5] = true;
}

const double &Product::getValueOfCutoff() const noexcept
{
    const static double defaultValue = double();
    if(cutoff_)
        return *cutoff_;
    return defaultValue;
}
const std::shared_ptr<double> &Product::getCutoff() const noexcept
{
    return cutoff_;
}
void Product::setCutoff(const double &pCutoff) noexcept
{
    cutoff_ = std::make_shared<double>(pCutoff);
    dirtyFlag_[6] = true;
}


void Product::setCutoffToNull() noexcept
{
    cutoff_.reset();
    dirtyFlag_[6] = true;
}

const double &Product::getValueOfCostprice() const noexcept
{
    const static double defaultValue = double();
    if(costprice_)
        return *costprice_;
    return defaultValue;
}
const std::shared_ptr<double> &Product::getCostprice() const noexcept
{
    return costprice_;
}
void Product::setCostprice(const double &pCostprice) noexcept
{
    costprice_ = std::make_shared<double>(pCostprice);
    dirtyFlag_[7] = true;
}


void Product::setCostpriceToNull() noexcept
{
    costprice_.reset();
    dirtyFlag_[7] = true;
}

void Product::updateId(const uint64_t id)
{
    id_ = std::make_shared<int64_t>(static_cast<int64_t>(id));
}

const std::vector<std::string> &Product::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "productName",
        "dir_id",
        "salePrice",
        "supplier",
        "brand",
        "cutoff",
        "costPrice"
    };
    return inCols;
}

void Product::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getProductname())
        {
            binder << getValueOfProductname();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getDirId())
        {
            binder << getValueOfDirId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getSaleprice())
        {
            binder << getValueOfSaleprice();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getSupplier())
        {
            binder << getValueOfSupplier();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getBrand())
        {
            binder << getValueOfBrand();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getCutoff())
        {
            binder << getValueOfCutoff();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getCostprice())
        {
            binder << getValueOfCostprice();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Product::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(dirtyFlag_);i++)
    {
        if(dirtyFlag_[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void Product::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getProductname())
        {
            binder << getValueOfProductname();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getDirId())
        {
            binder << getValueOfDirId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getSaleprice())
        {
            binder << getValueOfSaleprice();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getSupplier())
        {
            binder << getValueOfSupplier();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getBrand())
        {
            binder << getValueOfBrand();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getCutoff())
        {
            binder << getValueOfCutoff();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getCostprice())
        {
            binder << getValueOfCostprice();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Product::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::Int64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getProductname())
    {
        ret["productName"]=getValueOfProductname();
    }
    else
    {
        ret["productName"]=Json::Value();
    }
    if(getDirId())
    {
        ret["dir_id"]=(Json::Int64)getValueOfDirId();
    }
    else
    {
        ret["dir_id"]=Json::Value();
    }
    if(getSaleprice())
    {
        ret["salePrice"]=getValueOfSaleprice();
    }
    else
    {
        ret["salePrice"]=Json::Value();
    }
    if(getSupplier())
    {
        ret["supplier"]=getValueOfSupplier();
    }
    else
    {
        ret["supplier"]=Json::Value();
    }
    if(getBrand())
    {
        ret["brand"]=getValueOfBrand();
    }
    else
    {
        ret["brand"]=Json::Value();
    }
    if(getCutoff())
    {
        ret["cutoff"]=getValueOfCutoff();
    }
    else
    {
        ret["cutoff"]=Json::Value();
    }
    if(getCostprice())
    {
        ret["costPrice"]=getValueOfCostprice();
    }
    else
    {
        ret["costPrice"]=Json::Value();
    }
    return ret;
}

Json::Value Product::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 8)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::Int64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getProductname())
            {
                ret[pMasqueradingVector[1]]=getValueOfProductname();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getDirId())
            {
                ret[pMasqueradingVector[2]]=(Json::Int64)getValueOfDirId();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getSaleprice())
            {
                ret[pMasqueradingVector[3]]=getValueOfSaleprice();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getSupplier())
            {
                ret[pMasqueradingVector[4]]=getValueOfSupplier();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getBrand())
            {
                ret[pMasqueradingVector[5]]=getValueOfBrand();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getCutoff())
            {
                ret[pMasqueradingVector[6]]=getValueOfCutoff();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getCostprice())
            {
                ret[pMasqueradingVector[7]]=getValueOfCostprice();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::Int64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getProductname())
    {
        ret["productName"]=getValueOfProductname();
    }
    else
    {
        ret["productName"]=Json::Value();
    }
    if(getDirId())
    {
        ret["dir_id"]=(Json::Int64)getValueOfDirId();
    }
    else
    {
        ret["dir_id"]=Json::Value();
    }
    if(getSaleprice())
    {
        ret["salePrice"]=getValueOfSaleprice();
    }
    else
    {
        ret["salePrice"]=Json::Value();
    }
    if(getSupplier())
    {
        ret["supplier"]=getValueOfSupplier();
    }
    else
    {
        ret["supplier"]=Json::Value();
    }
    if(getBrand())
    {
        ret["brand"]=getValueOfBrand();
    }
    else
    {
        ret["brand"]=Json::Value();
    }
    if(getCutoff())
    {
        ret["cutoff"]=getValueOfCutoff();
    }
    else
    {
        ret["cutoff"]=Json::Value();
    }
    if(getCostprice())
    {
        ret["costPrice"]=getValueOfCostprice();
    }
    else
    {
        ret["costPrice"]=Json::Value();
    }
    return ret;
}

bool Product::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("productName"))
    {
        if(!validJsonOfField(1, "productName", pJson["productName"], err, true))
            return false;
    }
    if(pJson.isMember("dir_id"))
    {
        if(!validJsonOfField(2, "dir_id", pJson["dir_id"], err, true))
            return false;
    }
    if(pJson.isMember("salePrice"))
    {
        if(!validJsonOfField(3, "salePrice", pJson["salePrice"], err, true))
            return false;
    }
    if(pJson.isMember("supplier"))
    {
        if(!validJsonOfField(4, "supplier", pJson["supplier"], err, true))
            return false;
    }
    if(pJson.isMember("brand"))
    {
        if(!validJsonOfField(5, "brand", pJson["brand"], err, true))
            return false;
    }
    if(pJson.isMember("cutoff"))
    {
        if(!validJsonOfField(6, "cutoff", pJson["cutoff"], err, true))
            return false;
    }
    if(pJson.isMember("costPrice"))
    {
        if(!validJsonOfField(7, "costPrice", pJson["costPrice"], err, true))
            return false;
    }
    return true;
}
bool Product::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                 const std::vector<std::string> &pMasqueradingVector,
                                                 std::string &err)
{
    if(pMasqueradingVector.size() != 8)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty())
    {
        if(pJson.isMember(pMasqueradingVector[0]))
        {
            if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[1].empty())
    {
        if(pJson.isMember(pMasqueradingVector[1]))
        {
            if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[2].empty())
    {
        if(pJson.isMember(pMasqueradingVector[2]))
        {
            if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[3].empty())
    {
        if(pJson.isMember(pMasqueradingVector[3]))
        {
            if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[4].empty())
    {
        if(pJson.isMember(pMasqueradingVector[4]))
        {
            if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[5].empty())
    {
        if(pJson.isMember(pMasqueradingVector[5]))
        {
            if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[6].empty())
    {
        if(pJson.isMember(pMasqueradingVector[6]))
        {
            if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[7].empty())
    {
        if(pJson.isMember(pMasqueradingVector[7]))
        {
            if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                return false;
        }
    }
    return true;
}
bool Product::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("productName"))
    {
        if(!validJsonOfField(1, "productName", pJson["productName"], err, false))
            return false;
    }
    if(pJson.isMember("dir_id"))
    {
        if(!validJsonOfField(2, "dir_id", pJson["dir_id"], err, false))
            return false;
    }
    if(pJson.isMember("salePrice"))
    {
        if(!validJsonOfField(3, "salePrice", pJson["salePrice"], err, false))
            return false;
    }
    if(pJson.isMember("supplier"))
    {
        if(!validJsonOfField(4, "supplier", pJson["supplier"], err, false))
            return false;
    }
    if(pJson.isMember("brand"))
    {
        if(!validJsonOfField(5, "brand", pJson["brand"], err, false))
            return false;
    }
    if(pJson.isMember("cutoff"))
    {
        if(!validJsonOfField(6, "cutoff", pJson["cutoff"], err, false))
            return false;
    }
    if(pJson.isMember("costPrice"))
    {
        if(!validJsonOfField(7, "costPrice", pJson["costPrice"], err, false))
            return false;
    }
    return true;
}
bool Product::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                               const std::vector<std::string> &pMasqueradingVector,
                                               std::string &err)
{
    if(pMasqueradingVector.size() != 8)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
            return false;
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
            return false;
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
            return false;
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
            return false;
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
            return false;
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
            return false;
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
            return false;
    }
    return true;
}
bool Product::validJsonOfField(size_t index,
                               const std::string &fieldName,
                               const Json::Value &pJson, 
                               std::string &err, 
                               bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }        
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 45)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 45)";
                return false;               
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 45)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 45)";
                return false;               
            }

            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 45)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 45)";
                return false;               
            }

            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
