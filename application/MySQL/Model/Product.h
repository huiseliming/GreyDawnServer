/**
 *
 *  Product.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

using namespace drogon::orm;
namespace drogon
{
namespace orm
{
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
}
}
namespace drogon_model
{
namespace products_db2 
{

class Product
{
  public:
    struct Cols
    {
        static const std::string _id;
        static const std::string _productName;
        static const std::string _dir_id;
        static const std::string _salePrice;
        static const std::string _supplier;
        static const std::string _brand;
        static const std::string _cutoff;
        static const std::string _costPrice;
    };

    const static int primaryKeyNumber;
    const static std::string tableName;
    const static bool hasPrimaryKey;
    const static std::string primaryKeyName;
    using PrimaryKeyType = int64_t;
    const PrimaryKeyType &getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names, 
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all 
     * columns by an asterisk), please set the offset to -1.
     */
    explicit Product(const Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit Product(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    Product(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    Product() = default;
    
    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err);
    static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    static bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson, 
                          std::string &err, 
                          bool isForCreation);

    /**  For column id  */
    ///Get the value of the column id, returns the default value if the column is null
    const int64_t &getValueOfId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int64_t> &getId() const noexcept;

    /**  For column productName  */
    ///Get the value of the column productName, returns the default value if the column is null
    const std::string &getValueOfProductname() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getProductname() const noexcept;
    ///Set the value of the column productName
    void setProductname(const std::string &pProductname) noexcept;
    void setProductname(std::string &&pProductname) noexcept;
    void setProductnameToNull() noexcept;

    /**  For column dir_id  */
    ///Get the value of the column dir_id, returns the default value if the column is null
    const int64_t &getValueOfDirId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int64_t> &getDirId() const noexcept;
    ///Set the value of the column dir_id
    void setDirId(const int64_t &pDirId) noexcept;
    void setDirIdToNull() noexcept;

    /**  For column salePrice  */
    ///Get the value of the column salePrice, returns the default value if the column is null
    const double &getValueOfSaleprice() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<double> &getSaleprice() const noexcept;
    ///Set the value of the column salePrice
    void setSaleprice(const double &pSaleprice) noexcept;
    void setSalepriceToNull() noexcept;

    /**  For column supplier  */
    ///Get the value of the column supplier, returns the default value if the column is null
    const std::string &getValueOfSupplier() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getSupplier() const noexcept;
    ///Set the value of the column supplier
    void setSupplier(const std::string &pSupplier) noexcept;
    void setSupplier(std::string &&pSupplier) noexcept;
    void setSupplierToNull() noexcept;

    /**  For column brand  */
    ///Get the value of the column brand, returns the default value if the column is null
    const std::string &getValueOfBrand() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getBrand() const noexcept;
    ///Set the value of the column brand
    void setBrand(const std::string &pBrand) noexcept;
    void setBrand(std::string &&pBrand) noexcept;
    void setBrandToNull() noexcept;

    /**  For column cutoff  */
    ///Get the value of the column cutoff, returns the default value if the column is null
    const double &getValueOfCutoff() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<double> &getCutoff() const noexcept;
    ///Set the value of the column cutoff
    void setCutoff(const double &pCutoff) noexcept;
    void setCutoffToNull() noexcept;

    /**  For column costPrice  */
    ///Get the value of the column costPrice, returns the default value if the column is null
    const double &getValueOfCostprice() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<double> &getCostprice() const noexcept;
    ///Set the value of the column costPrice
    void setCostprice(const double &pCostprice) noexcept;
    void setCostpriceToNull() noexcept;


    static size_t getColumnNumber() noexcept {  return 8;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
    /// Relationship interfaces
  private:
    friend Mapper<Product>;
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<int64_t> id_;
    std::shared_ptr<std::string> productname_;
    std::shared_ptr<int64_t> dirId_;
    std::shared_ptr<double> saleprice_;
    std::shared_ptr<std::string> supplier_;
    std::shared_ptr<std::string> brand_;
    std::shared_ptr<double> cutoff_;
    std::shared_ptr<double> costprice_;
    struct MetaData
    {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[8]={ false };
  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="select * from " + tableName + " where id = ?";
        return sql;                   
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="delete from " + tableName + " where id = ?";
        return sql;                   
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
            sql += "id,";
            ++parametersCount;
        if(dirtyFlag_[1])
        {
            sql += "productName,";
            ++parametersCount;
        }
        if(dirtyFlag_[2])
        {
            sql += "dir_id,";
            ++parametersCount;
        }
        if(dirtyFlag_[3])
        {
            sql += "salePrice,";
            ++parametersCount;
        }
        if(dirtyFlag_[4])
        {
            sql += "supplier,";
            ++parametersCount;
        }
        if(dirtyFlag_[5])
        {
            sql += "brand,";
            ++parametersCount;
        }
        if(dirtyFlag_[6])
        {
            sql += "cutoff,";
            ++parametersCount;
        }
        if(dirtyFlag_[7])
        {
            sql += "costPrice,";
            ++parametersCount;
        }
        needSelection=true;
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";
        
        sql +="default,";
        if(dirtyFlag_[1])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[2])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[3])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[4])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[5])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[6])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[7])
        {
            sql.append("?,");

        } 
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        sql.append(1, ')');
        LOG_TRACE << sql;
        return sql;   
    }
};
} // namespace products_db2
} // namespace drogon_model
